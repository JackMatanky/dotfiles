{{/* vim: set filetype=bash: */}}
{{- if .packages.python.global }}
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# Script: run_onchange_install-python-packages.sh.tmpl
# Purpose: Install Python packages using pip when packages.toml changes
# Docs: https://www.chezmoi.io/user-guide/advanced/install-packages-declaratively/
# Dependencies: Python, pip
# Hash based on: {{ .packages.python.global | join "," }}
# -----------------------------------------------------------------------------

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_info "üêç Starting Python package installation..."

# ============================================================================ #
#                               PYTHON SETUP                                  #
# ============================================================================ #

# Detect Python command
PYTHON_CMD=""
if command -v python3 &> /dev/null; then
    PYTHON_CMD="python3"
elif command -v python &> /dev/null; then
    PYTHON_CMD="python"
else
    log_error "Python not found. Please install Python first."
    {{- if eq .chezmoi.os "darwin" }}
    log_info "Install with: brew install python@3.13"
    {{- else if eq .chezmoi.os "linux" }}
    log_info "Install with: sudo apt install python3 python3-pip"
    {{- end }}
    exit 1
fi

# Detect pip command
PIP_CMD=""
if command -v pip3 &> /dev/null; then
    PIP_CMD="pip3"
elif command -v pip &> /dev/null; then
    PIP_CMD="pip"
else
    log_error "pip not found. Please install pip first."
    exit 1
fi

log_success "Python $($PYTHON_CMD --version | cut -d' ' -f2) and pip $($PIP_CMD --version | cut -d' ' -f2) are available"

# Upgrade pip to latest version
log_info "Upgrading pip to latest version..."
$PIP_CMD install --upgrade pip

# ============================================================================ #
#                             PYTHON PACKAGES                                 #
# ============================================================================ #

log_info "üì¶ Installing Python packages..."

# Function to check if a package is installed
is_pip_package_installed() {
    $PIP_CMD list | grep -i "^$1 " &> /dev/null
}

# Install packages with --user flag to avoid system conflicts
{{- range .packages.python.global }}
if ! is_pip_package_installed "{{ . }}"; then
    log_info "Installing Python package: {{ . }}"
    if $PIP_CMD install --user {{ . | quote }}; then
        log_success "Installed: {{ . }}"
    else
        log_warning "Failed to install: {{ . }}"
    fi
else
    log_success "Already installed: {{ . }}"
fi
{{- end }}

# ============================================================================ #
#                              UPDATE PACKAGES                                #
# ============================================================================ #

log_info "üîÑ Checking for outdated packages..."

# Show outdated packages
outdated_output=$($PIP_CMD list --user --outdated 2>/dev/null | tail -n +3)
if [[ -n "$outdated_output" ]]; then
    log_warning "Found outdated packages:"
    echo "$outdated_output"
    
    log_info "Updating outdated packages..."
    # Extract package names and update them
    echo "$outdated_output" | awk '{print $1}' | while read -r package; do
        if [[ -n "$package" ]]; then
            log_info "Updating: $package"
            $PIP_CMD install --user --upgrade "$package" || log_warning "Failed to update $package"
        fi
    done
else
    log_success "All packages are up to date"
fi

# ============================================================================ #
#                             VERIFY INSTALLATIONS                            #
# ============================================================================ #

log_info "üîç Verifying installations..."

# Check some key tools
check_tool() {
    local tool=$1
    local description=$2
    if command -v "$tool" &> /dev/null; then
        log_success "$tool - $description ‚úì"
    elif $PYTHON_CMD -c "import $tool" 2>/dev/null; then
        log_success "$tool - $description (Python module) ‚úì"
    else
        log_warning "$tool not found or not in PATH"
    fi
}

{{- range .packages.python.global }}
case "{{ . }}" in
    "black") check_tool "black" "Code formatter" ;;
    "flake8") check_tool "flake8" "Linter" ;;
    "mypy") check_tool "mypy" "Type checker" ;;
    "isort") check_tool "isort" "Import sorter" ;;
    "pytest") check_tool "pytest" "Testing framework" ;;
    "jupyter") check_tool "jupyter" "Notebook environment" ;;
    "jupyterlab") check_tool "jupyter-lab" "JupyterLab" ;;
    "ipython") check_tool "ipython" "Enhanced Python shell" ;;
    "poetry") check_tool "poetry" "Dependency management" ;;
    "pipenv") check_tool "pipenv" "Virtual environment" ;;
    "cookiecutter") check_tool "cookiecutter" "Project templates" ;;
    "mkdocs") check_tool "mkdocs" "Documentation generator" ;;
    "pre-commit") check_tool "pre-commit" "Git hooks" ;;
    *) 
        # For modules that don't have CLI commands
        if $PYTHON_CMD -c "import {{ . }}" 2>/dev/null; then
            log_success "{{ . }} - Python module ‚úì"
        else
            log_warning "{{ . }} not available"
        fi
        ;;
esac
{{- end }}

# ============================================================================ #
#                             PATH CONFIGURATION                              #
# ============================================================================ #

log_info "üîß Checking PATH configuration..."

# Check if user's local bin is in PATH
USER_LOCAL_BIN=""
{{- if eq .chezmoi.os "darwin" }}
USER_LOCAL_BIN="$HOME/Library/Python/$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')/bin"
{{- else }}
USER_LOCAL_BIN="$HOME/.local/bin"
{{- end }}

if [[ -d "$USER_LOCAL_BIN" ]]; then
    if echo "$PATH" | grep -q "$USER_LOCAL_BIN"; then
        log_success "User local bin directory is in PATH: $USER_LOCAL_BIN"
    else
        log_warning "User local bin directory not in PATH: $USER_LOCAL_BIN"
        log_info "Add to your shell profile: export PATH=\"$USER_LOCAL_BIN:\$PATH\""
    fi
fi

# ============================================================================ #
#                               COMPLETION                                    #
# ============================================================================ #

log_success "üéâ Python package installation completed!"
log_info "üìä Summary:"
log_info "  ‚Ä¢ Python packages: {{ len .packages.python.global }}"
log_info ""
log_info "üí° Key tools installed:"
log_info "  üîß Development: Black, Flake8, MyPy, isort"
log_info "  üß™ Testing: pytest, coverage"
log_info "  üìì Jupyter: JupyterLab, IPython, notebook"
log_info "  üåê Web: Flask, FastAPI, requests"
log_info "  üì¶ Package management: Poetry, pipenv"
log_info "  üìö Documentation: MkDocs, Sphinx"
log_info "  ü™ù Git hooks: pre-commit"
log_info ""
log_info "üîß Next steps:"
log_info "  ‚Ä¢ Ensure $USER_LOCAL_BIN is in your PATH"
log_info "  ‚Ä¢ Run 'pip list --user --outdated' to check for updates"
log_info "  ‚Ä¢ Consider using virtual environments for projects"
log_info "  ‚Ä¢ Configure installed tools as needed"
{{- else }}
#!/usr/bin/env bash
# Python packages list is empty - skipping Python package installation
exit 0
{{- end }}
