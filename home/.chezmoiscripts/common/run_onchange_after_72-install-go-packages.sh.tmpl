{{/* vim: set filetype=bash: */}}
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# Script: run_onchange_install-go-packages.sh.tmpl
# Purpose: Install Go packages when packages.toml changes
# Docs: https://www.chezmoi.io/user-guide/advanced/install-packages-declaratively/
# Dependencies: Go
# -----------------------------------------------------------------------------

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_info "🐹 Starting Go package installation..."

# ============================================================================ #
#                                 GO SETUP                                    #
# ============================================================================ #

# Check if Go is installed
if ! command -v go &> /dev/null; then
    log_error "Go not found. Please install Go first."
    {{- if eq .chezmoi.os "darwin" }}
    log_info "Install with: brew install go"
    {{- else if eq .chezmoi.os "linux" }}
    log_info "Install with: sudo apt install golang-go"
    {{- end }}
    exit 1
fi

log_success "Go $(go version | awk '{print $3}') is available"

# Ensure GOPATH and GOBIN are set
export GOPATH="${GOPATH:-$HOME/go}"
export GOBIN="${GOBIN:-$GOPATH/bin}"

# Create Go directories if they don't exist
mkdir -p "$GOPATH/src" "$GOPATH/pkg" "$GOBIN"

log_info "GOPATH: $GOPATH"
log_info "GOBIN: $GOBIN"

# ============================================================================ #
#                               GO PACKAGES                                   #
# ============================================================================ #

log_info "📦 Installing Go packages..."

# Function to get binary name from Go module path
get_binary_name() {
    local module_path=$1
    # Extract the last part of the path, which is usually the binary name
    echo "${module_path##*/}"
}

# Function to check if a binary is installed
is_go_binary_installed() {
    local binary_name=$1
    command -v "$binary_name" &> /dev/null
}

# Install each Go package
{{- range .packages.go.binaries }}
# Extract binary name from module path
BINARY_NAME=""
case "{{ . }}" in
    *"/fzf@"*) BINARY_NAME="fzf" ;;
    *"/glow@"*) BINARY_NAME="glow" ;;
    *"/vhs@"*) BINARY_NAME="vhs" ;;
    *"/lazygit@"*) BINARY_NAME="lazygit" ;;
    *"/lazydocker@"*) BINARY_NAME="lazydocker" ;;
    *"/gh@"*) BINARY_NAME="gh" ;;
    *"/goreleaser@"*) BINARY_NAME="goreleaser" ;;
    *"/golangci-lint@"*) BINARY_NAME="golangci-lint" ;;
    *) BINARY_NAME=$(get_binary_name "{{ . }}") ;;
esac

if ! is_go_binary_installed "$BINARY_NAME"; then
    log_info "Installing Go package: {{ . }} -> $BINARY_NAME"
    if go install {{ . | quote }}; then
        log_success "Installed: {{ . }}"
    else
        log_warning "Failed to install: {{ . }}"
    fi
else
    log_success "Already installed: $BINARY_NAME"
fi
{{- end }}

# ============================================================================ #
#                             VERIFY INSTALLATIONS                            #
# ============================================================================ #

log_info "🔍 Verifying installations..."

# Check some key tools
check_tool() {
    local tool=$1
    local description=$2
    if command -v "$tool" &> /dev/null; then
        log_success "$tool - $description ✓"
        # Show version if available
        if $tool --version &> /dev/null; then
            local version=$($tool --version 2>/dev/null | head -1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
            [[ -n "$version" ]] && log_info "  Version: $version"
        fi
    else
        log_warning "$tool not found in PATH"
    fi
}

{{- range .packages.go.binaries }}
case "{{ . }}" in
    *"/fzf@"*) check_tool "fzf" "Fuzzy finder" ;;
    *"/glow@"*) check_tool "glow" "Markdown renderer" ;;
    *"/vhs@"*) check_tool "vhs" "Terminal GIF recorder" ;;
    *"/lazygit@"*) check_tool "lazygit" "Git TUI" ;;
    *"/lazydocker@"*) check_tool "lazydocker" "Docker TUI" ;;
    *"/gh@"*) check_tool "gh" "GitHub CLI" ;;
    *"/goreleaser@"*) check_tool "goreleaser" "Release automation" ;;
    *"/golangci-lint@"*) check_tool "golangci-lint" "Go linter" ;;
esac
{{- end }}

# ============================================================================ #
#                             PATH CONFIGURATION                              #
# ============================================================================ #

log_info "🔧 Checking PATH configuration..."

# Check if GOBIN is in PATH
if echo "$PATH" | grep -q "$GOBIN"; then
    log_success "GOBIN is in PATH: $GOBIN"
else
    log_warning "GOBIN not in PATH: $GOBIN"
    log_info "Add to your shell profile: export PATH=\"\$GOBIN:\$PATH\""
fi

# ============================================================================ #
#                               COMPLETION                                    #
# ============================================================================ #

log_success "🎉 Go package installation completed!"
log_info "📊 Summary:"
log_info "  • Go packages: {{ len .packages.go.binaries }}"
log_info ""
log_info "💡 Key tools installed:"
{{- range .packages.go.binaries }}
case "{{ . }}" in
    *"/fzf@"*) log_info "  🔍 fzf - Fuzzy finder" ;;
    *"/glow@"*) log_info "  📄 glow - Markdown renderer" ;;
    *"/vhs@"*) log_info "  📹 vhs - Terminal GIF recorder" ;;
    *"/lazygit@"*) log_info "  🌿 lazygit - Git terminal UI" ;;
    *"/lazydocker@"*) log_info "  🐳 lazydocker - Docker terminal UI" ;;
    *"/gh@"*) log_info "  🐙 gh - GitHub CLI" ;;
    *"/goreleaser@"*) log_info "  🚀 goreleaser - Release automation" ;;
    *"/golangci-lint@"*) log_info "  🔍 golangci-lint - Go linter suite" ;;
esac
{{- end }}
log_info ""
log_info "🔧 Next steps:"
log_info "  • Ensure \$GOBIN ($GOBIN) is in your PATH"
log_info "  • Update packages with: go install package@latest"
log_info "  • Configure installed tools as needed"
