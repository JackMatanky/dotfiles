{{/* vim: set filetype=bash: */}}
{{- if eq .chezmoi.os "linux" }}
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# Script: run_onchange_linux-install-packages.sh.tmpl
# Purpose: Install Linux packages using various package managers when packages.toml changes
# Docs: https://www.chezmoi.io/user-guide/advanced/install-packages-declaratively/
# Dependencies: apt (Ubuntu/Debian), flatpak, snap
# -----------------------------------------------------------------------------

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

# Check if running on Linux
if [[ "$(uname -s)" != "Linux" ]]; then
    log_error "This script is designed for Linux only"
    exit 1
fi

log_info "🐧 Starting Linux package installation..."

# Detect distribution
if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    DISTRO=$ID
else
    log_error "Cannot detect Linux distribution"
    exit 1
fi

log_info "Detected distribution: $DISTRO"

# ============================================================================ #
#                               APT PACKAGES                                  #
# ============================================================================ #

if command -v apt &> /dev/null; then
    log_info "📦 Installing APT packages..."
    
    # Update package lists
    log_info "Updating package lists..."
    sudo apt update
    
    # Install packages
    {{- range .packages.linux.apt }}
    if ! dpkg -l | grep -q "^ii  {{ . }} "; then
        log_info "Installing APT package: {{ . }}"
        if sudo apt install -y {{ . | quote }}; then
            log_success "Installed: {{ . }}"
        else
            log_warning "Failed to install: {{ . }}"
        fi
    else
        log_success "Already installed: {{ . }}"
    fi
    {{- end }}
    
    # Install Homebrew on Linux if not present
    if ! command -v brew &> /dev/null; then
        log_info "Installing Homebrew for Linux..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bashrc
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    else
        log_success "Homebrew already installed"
    fi
else
    log_warning "APT not available, skipping APT packages"
fi

# ============================================================================ #
#                              FLATPAK PACKAGES                               #
# ============================================================================ #

if command -v flatpak &> /dev/null; then
    log_info "📱 Installing Flatpak applications..."
    
    # Add Flathub repository if not already added
    if ! flatpak remotes | grep -q "flathub"; then
        log_info "Adding Flathub repository..."
        flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    fi
    
    {{- range .packages.linux.flatpak }}
    if ! flatpak list | grep -q "{{ . }}"; then
        log_info "Installing Flatpak app: {{ . }}"
        if flatpak install -y flathub {{ . | quote }}; then
            log_success "Installed: {{ . }}"
        else
            log_warning "Failed to install: {{ . }}"
        fi
    else
        log_success "Already installed: {{ . }}"
    fi
    {{- end }}
else
    log_warning "Flatpak not available. Install with: sudo apt install flatpak"
fi

# ============================================================================ #
#                               SNAP PACKAGES                                 #
# ============================================================================ #

if command -v snap &> /dev/null; then
    log_info "📦 Installing Snap packages..."
    
    {{- range .packages.linux.snap }}
    if ! snap list | grep -q "{{ . }}"; then
        log_info "Installing Snap package: {{ . }}"
        if sudo snap install {{ . | quote }}; then
            log_success "Installed: {{ . }}"
        else
            log_warning "Failed to install: {{ . }}"
        fi
    else
        log_success "Already installed: {{ . }}"
    fi
    {{- end }}
else
    log_warning "Snap not available. Install with: sudo apt install snapd"
fi

# ============================================================================ #
#                               MANUAL INSTALLS                               #
# ============================================================================ #

# Install modern CLI tools if not available via package managers
install_from_github() {
    local repo=$1
    local binary=$2
    local install_path="/usr/local/bin"
    
    if ! command -v "$binary" &> /dev/null; then
        log_info "Installing $binary from GitHub..."
        local latest_url=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | grep "browser_download_url.*linux.*x86_64" | cut -d '"' -f 4 | head -1)
        if [[ -n "$latest_url" ]]; then
            curl -L "$latest_url" | sudo tar -xz -C "$install_path" "$binary" 2>/dev/null || log_warning "Failed to install $binary"
        fi
    fi
}

# Install common tools that might not be in repositories
log_info "🔧 Installing additional CLI tools..."

# Only install if not available via package manager
if ! command -v rg &> /dev/null && ! dpkg -l | grep -q ripgrep; then
    install_from_github "BurntSushi/ripgrep" "rg"
fi

if ! command -v fd &> /dev/null && ! dpkg -l | grep -q fd-find; then
    install_from_github "sharkdp/fd" "fd"
fi

if ! command -v bat &> /dev/null && ! dpkg -l | grep -q bat; then
    install_from_github "sharkdp/bat" "bat"
fi

if ! command -v exa &> /dev/null; then
    install_from_github "ogham/exa" "exa"
fi

# ============================================================================ #
#                               COMPLETION                                    #
# ============================================================================ #

log_success "🎉 Linux package installation completed!"
log_info "📊 Summary:"
log_info "  • APT packages: {{ len .packages.linux.apt }}"
log_info "  • Flatpak applications: {{ len .packages.linux.flatpak }}"
log_info "  • Snap packages: {{ len .packages.linux.snap }}"
log_info ""
log_info "💡 Next steps:"
log_info "  • Restart terminal to load new configurations"
log_info "  • Configure installed applications as needed"
log_info "  • Run language-specific package installers (cargo, npm, pip)"
{{- end }}
