{{/* vim: set filetype=bash: */}}
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# Script: run_onchange_install-all-packages.sh.tmpl
# Purpose: Master script to install all packages across all package managers
# Docs: https://www.chezmoi.io/user-guide/advanced/install-packages-declaratively/
# Dependencies: Various package managers
# -----------------------------------------------------------------------------

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_header() {
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    echo -e "${PURPLE}$*${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════════════════════${NC}"
}

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Track execution time
start_time=$(date +%s)

log_header "🚀 STARTING COMPREHENSIVE PACKAGE INSTALLATION"
log_info "Timestamp: $(date)"
log_info "Platform: {{ .chezmoi.os }} ({{ .chezmoi.arch }})"
log_info "User: {{ .chezmoi.username }}"
log_info ""

# ============================================================================ #
#                           PLATFORM-SPECIFIC PACKAGES                        #
# ============================================================================ #

{{- if eq .chezmoi.os "darwin" }}
log_header "🍺 INSTALLING MACOS PACKAGES"
if [[ -f "$SCRIPT_DIR/run_onchange_darwin-install-packages.sh" ]]; then
    if bash "$SCRIPT_DIR/run_onchange_darwin-install-packages.sh"; then
        log_success "macOS packages installation completed"
    else
        log_error "macOS packages installation failed"
    fi
else
    log_warning "macOS package installation script not found"
fi
echo ""
{{- end }}

{{- if eq .chezmoi.os "linux" }}
log_header "🐧 INSTALLING LINUX PACKAGES"
if [[ -f "$SCRIPT_DIR/run_onchange_linux-install-packages.sh" ]]; then
    if bash "$SCRIPT_DIR/run_onchange_linux-install-packages.sh"; then
        log_success "Linux packages installation completed"
    else
        log_error "Linux packages installation failed"
    fi
else
    log_warning "Linux package installation script not found"
fi
echo ""
{{- end }}

# ============================================================================ #
#                         LANGUAGE-SPECIFIC PACKAGES                          #
# ============================================================================ #

{{- if .packages.use_cargo | default true }}
log_header "🦀 INSTALLING RUST/CARGO PACKAGES"
if [[ -f "$SCRIPT_DIR/run_onchange_install-cargo-packages.sh" ]]; then
    if bash "$SCRIPT_DIR/run_onchange_install-cargo-packages.sh"; then
        log_success "Cargo packages installation completed"
    else
        log_warning "Cargo packages installation failed (may need Rust installed first)"
    fi
else
    log_warning "Cargo package installation script not found"
fi
echo ""
{{- end }}

{{- if .packages.use_npm | default true }}
log_header "📦 INSTALLING NODE.JS/NPM PACKAGES"
if [[ -f "$SCRIPT_DIR/run_onchange_install-npm-packages.sh" ]]; then
    if bash "$SCRIPT_DIR/run_onchange_install-npm-packages.sh"; then
        log_success "NPM packages installation completed"
    else
        log_warning "NPM packages installation failed (may need Node.js installed first)"
    fi
else
    log_warning "NPM package installation script not found"
fi
echo ""
{{- end }}

log_header "🐍 INSTALLING PYTHON PACKAGES"
if [[ -f "$SCRIPT_DIR/run_onchange_install-python-packages.sh" ]]; then
    if bash "$SCRIPT_DIR/run_onchange_install-python-packages.sh"; then
        log_success "Python packages installation completed"
    else
        log_warning "Python packages installation failed (may need Python installed first)"
    fi
else
    log_warning "Python package installation script not found"
fi
echo ""

log_header "🐹 INSTALLING GO PACKAGES"
if [[ -f "$SCRIPT_DIR/run_onchange_install-go-packages.sh" ]]; then
    if bash "$SCRIPT_DIR/run_onchange_install-go-packages.sh"; then
        log_success "Go packages installation completed"
    else
        log_warning "Go packages installation failed (may need Go installed first)"
    fi
else
    log_warning "Go package installation script not found"
fi
echo ""

# ============================================================================ #
#                             POST-INSTALLATION                               #
# ============================================================================ #

log_header "🔧 POST-INSTALLATION SETUP"

# Refresh shell environment
log_info "Refreshing shell environment..."
if [[ -f ~/.bashrc ]]; then
    log_info "Sourcing ~/.bashrc..."
    # Note: Can't source in script, but suggest to user
fi

if [[ -f ~/.zshrc ]]; then
    log_info "Sourcing ~/.zshrc..."
    # Note: Can't source in script, but suggest to user
fi

# Check if important binaries are in PATH
log_info "Checking PATH for important binaries..."

check_in_path() {
    local binary=$1
    local description=$2
    if command -v "$binary" &> /dev/null; then
        log_success "$binary ($description) ✓"
    else
        log_warning "$binary ($description) not found in PATH"
    fi
}

# Check key tools
check_in_path "rg" "ripgrep"
check_in_path "fd" "fd-find"
check_in_path "bat" "bat"
check_in_path "exa" "exa"
check_in_path "zoxide" "zoxide"
check_in_path "starship" "starship"
check_in_path "fzf" "fzf"

{{- if eq .chezmoi.os "darwin" }}
check_in_path "brew" "Homebrew"
check_in_path "code" "VS Code"
{{- end }}

# ============================================================================ #
#                                 SUMMARY                                     #
# ============================================================================ #

end_time=$(date +%s)
duration=$((end_time - start_time))

log_header "📊 INSTALLATION SUMMARY"
log_info "Total execution time: ${duration}s"
log_info ""
log_info "Package counts:"
{{- if eq .chezmoi.os "darwin" }}
log_info "  🍺 Homebrew formulas: {{ len .packages.darwin.brews }}"
log_info "  📱 Homebrew casks: {{ len .packages.darwin.casks }}"
log_info "  🏪 Mac App Store: {{ sub (len .packages.darwin.mas) 1 }}"
log_info "  🔧 VS Code extensions: {{ len .packages.darwin.mas.vscode }}"
{{- end }}
{{- if eq .chezmoi.os "linux" }}
log_info "  📦 APT packages: {{ len .packages.linux.apt }}"
log_info "  📱 Flatpak apps: {{ len .packages.linux.flatpak }}"
log_info "  📦 Snap packages: {{ len .packages.linux.snap }}"
{{- end }}
{{- if .packages.use_cargo | default true }}
log_info "  🦀 Cargo crates: {{ len .packages.cargo.crates }}"
{{- end }}
{{- if .packages.use_npm | default true }}
log_info "  📦 NPM packages: {{ len .packages.npm.global }}"
{{- end }}
log_info "  🐍 Python packages: {{ len .packages.python.global }}"
log_info "  🐹 Go packages: {{ len .packages.go.binaries }}"
log_info ""
log_info "Total packages managed: {{ add (len .packages.darwin.brews) (len .packages.darwin.casks) (sub (len .packages.darwin.mas) 1) (len .packages.cargo.crates) (len .packages.npm.global) (len .packages.python.global) (len .packages.go.binaries) }}"
log_info ""

log_header "🎉 INSTALLATION COMPLETE!"
log_info "💡 Next steps:"
log_info "  1. Restart your terminal or run: source ~/.zshrc"
log_info "  2. Verify installations with: chezmoi verify"
{{- if eq .chezmoi.os "darwin" }}
log_info "  3. Sign into Mac App Store: mas signin your@email.com"
{{- end }}
log_info "  4. Configure newly installed applications"
log_info "  5. Run periodic updates:"
{{- if eq .chezmoi.os "darwin" }}
log_info "     • brew update && brew upgrade"
{{- end }}
{{- if eq .chezmoi.os "linux" }}
log_info "     • sudo apt update && sudo apt upgrade"
{{- end }}
{{- if .packages.use_cargo | default true }}
log_info "     • cargo install-update --all"
{{- end }}
{{- if .packages.use_npm | default true }}
log_info "     • npm update -g"
{{- end }}
log_info "     • pip list --user --outdated"
log_info ""
log_success "All package installation scripts have been executed!"
log_info "Check individual script outputs above for any warnings or errors."
