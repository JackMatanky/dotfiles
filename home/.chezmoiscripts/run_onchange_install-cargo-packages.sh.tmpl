{{/* vim: set filetype=bash: */}}
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# Script: run_onchange_install-cargo-packages.sh.tmpl
# Purpose: Install Rust packages using Cargo when packages.toml changes
# Docs: https://www.chezmoi.io/user-guide/advanced/install-packages-declaratively/
# Dependencies: Rust, Cargo
# -----------------------------------------------------------------------------

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_info "ðŸ¦€ Starting Rust/Cargo package installation..."

# ============================================================================ #
#                               RUST SETUP                                    #
# ============================================================================ #

# Install Rust if not present
if ! command -v rustc &> /dev/null; then
    log_info "Installing Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
    
    # Source the cargo environment
    source ~/.cargo/env
    
    log_success "Rust installed successfully"
else
    log_success "Rust already installed"
fi

# Ensure cargo is available
if ! command -v cargo &> /dev/null; then
    log_error "Cargo not available. Please install Rust properly."
    exit 1
fi

# Update Rust toolchain
log_info "Updating Rust toolchain..."
rustup update

# ============================================================================ #
#                             CARGO PACKAGES                                  #
# ============================================================================ #

log_info "ðŸ“¦ Installing Cargo packages..."

# Install cargo-update if not present (for managing updates)
if ! cargo install --list | grep -q "cargo-update"; then
    log_info "Installing cargo-update for package management..."
    cargo install cargo-update
fi

# Function to check if a crate is installed
is_crate_installed() {
    cargo install --list | grep -q "^$1 "
}

# Install each crate
{{- range .packages.cargo.crates }}
if ! is_crate_installed "{{ . }}"; then
    log_info "Installing crate: {{ . }}"
    if cargo install {{ . | quote }}; then
        log_success "Installed: {{ . }}"
    else
        log_warning "Failed to install: {{ . }}"
    fi
else
    log_success "Already installed: {{ . }}"
fi
{{- end }}

# ============================================================================ #
#                              UPDATE PACKAGES                                #
# ============================================================================ #

log_info "ðŸ”„ Updating installed Cargo packages..."
if command -v cargo-install-update &> /dev/null; then
    cargo install-update --all || log_warning "Some packages failed to update"
else
    log_warning "cargo-install-update not available. Install with: cargo install cargo-update"
fi

# ============================================================================ #
#                               COMPLETION                                    #
# ============================================================================ #

log_success "ðŸŽ‰ Cargo package installation completed!"
log_info "ðŸ“Š Summary:"
log_info "  â€¢ Cargo crates: {{ len .packages.cargo.crates }}"
log_info ""
log_info "ðŸ’¡ Installed tools:"
{{- range .packages.cargo.crates }}
if is_crate_installed "{{ . }}"; then
    case "{{ . }}" in
        "ripgrep") log_info "  â€¢ rg - Fast grep alternative" ;;
        "fd-find") log_info "  â€¢ fd - Fast find alternative" ;;
        "exa") log_info "  â€¢ exa - Modern ls replacement" ;;
        "bat") log_info "  â€¢ bat - Better cat with syntax highlighting" ;;
        "zoxide") log_info "  â€¢ z - Smart cd replacement" ;;
        "starship") log_info "  â€¢ starship - Cross-shell prompt" ;;
        "bottom") log_info "  â€¢ btm - System monitor" ;;
        "tokei") log_info "  â€¢ tokei - Code line counter" ;;
        "hyperfine") log_info "  â€¢ hyperfine - Benchmarking tool" ;;
        "git-delta") log_info "  â€¢ delta - Better git diff" ;;
        *) log_info "  â€¢ {{ . }}" ;;
    esac
fi
{{- end }}
log_info ""
log_info "ðŸ”§ Next steps:"
log_info "  â€¢ Restart terminal or source ~/.cargo/env to use new tools"
log_info "  â€¢ Run 'cargo install-update --all' periodically to update packages"
