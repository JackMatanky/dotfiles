{{/* vim: set filetype=bash: */}}
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# Script: run_onchange_install-npm-packages.sh.tmpl
# Purpose: Install Node.js packages using NPM when packages.toml changes
# Docs: https://www.chezmoi.io/user-guide/advanced/install-packages-declaratively/
# Dependencies: Node.js, npm
# -----------------------------------------------------------------------------

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_info "📦 Starting Node.js/NPM package installation..."

# ============================================================================ #
#                               NODE.JS SETUP                                 #
# ============================================================================ #

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    log_error "Node.js not found. Please install Node.js first."
    {{- if eq .chezmoi.os "darwin" }}
    log_info "Install with: brew install node"
    {{- else if eq .chezmoi.os "linux" }}
    log_info "Install with: sudo apt install nodejs npm"
    {{- end }}
    exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    log_error "npm not found. Please install npm first."
    exit 1
fi

log_success "Node.js $(node --version) and npm $(npm --version) are available"

# Update npm to latest version
log_info "Updating npm to latest version..."
npm install -g npm@latest

# ============================================================================ #
#                               NPM PACKAGES                                  #
# ============================================================================ #

log_info "🚀 Installing NPM global packages..."

# Function to check if a package is installed globally
is_npm_package_installed() {
    npm list -g --depth=0 "$1" &> /dev/null
}

# Install each package
{{- range .packages.npm.global }}
if ! is_npm_package_installed "{{ . }}"; then
    log_info "Installing NPM package: {{ . }}"
    if npm install -g {{ . | quote }}; then
        log_success "Installed: {{ . }}"
    else
        log_warning "Failed to install: {{ . }}"
    fi
else
    log_success "Already installed: {{ . }}"
fi
{{- end }}

# ============================================================================ #
#                              UPDATE PACKAGES                                #
# ============================================================================ #

log_info "🔄 Checking for outdated packages..."

# Show outdated packages
outdated_packages=$(npm outdated -g --depth=0 2>/dev/null | tail -n +2 | wc -l | tr -d ' ')
if [[ "$outdated_packages" -gt 0 ]]; then
    log_warning "Found $outdated_packages outdated packages:"
    npm outdated -g --depth=0 2>/dev/null || true
    
    log_info "Updating outdated packages..."
    npm update -g
else
    log_success "All packages are up to date"
fi

# ============================================================================ #
#                             VERIFY INSTALLATIONS                            #
# ============================================================================ #

log_info "🔍 Verifying installations..."

# Check some key tools
check_tool() {
    local tool=$1
    local description=$2
    if command -v "$tool" &> /dev/null; then
        log_success "$tool - $description ✓"
    else
        log_warning "$tool not found in PATH"
    fi
}

{{- range .packages.npm.global }}
case "{{ . }}" in
    "typescript") check_tool "tsc" "TypeScript compiler" ;;
    "ts-node") check_tool "ts-node" "TypeScript executor" ;;
    "eslint") check_tool "eslint" "JavaScript linter" ;;
    "prettier") check_tool "prettier" "Code formatter" ;;
    "nodemon") check_tool "nodemon" "Development server" ;;
    "webpack") check_tool "webpack" "Module bundler" ;;
    "webpack-cli") check_tool "webpack" "Webpack CLI" ;;
    "vite") check_tool "vite" "Build tool" ;;
    "jest") check_tool "jest" "Testing framework" ;;
    "http-server") check_tool "http-server" "Static file server" ;;
    "live-server") check_tool "live-server" "Development server" ;;
    "yarn") check_tool "yarn" "Package manager" ;;
    "pnpm") check_tool "pnpm" "Fast package manager" ;;
    "mermaid-cli") check_tool "mmdc" "Mermaid diagram CLI" ;;
    "tldr") check_tool "tldr" "Simplified man pages" ;;
esac
{{- end }}

# ============================================================================ #
#                               COMPLETION                                    #
# ============================================================================ #

log_success "🎉 NPM package installation completed!"
log_info "📊 Summary:"
log_info "  • NPM global packages: {{ len .packages.npm.global }}"
log_info ""
log_info "💡 Key tools installed:"
log_info "  🔧 Development: TypeScript, ESLint, Prettier"
log_info "  📦 Build tools: Webpack, Vite, Rollup"
log_info "  🧪 Testing: Jest, Mocha, Cypress, Playwright"
log_info "  🌐 Servers: http-server, live-server, json-server"
log_info "  📚 Documentation: Mermaid CLI, Marp CLI"
log_info "  ⚡ Package managers: Yarn, pnpm"
log_info ""
log_info "🔧 Next steps:"
log_info "  • Run 'npm outdated -g' to check for updates"
log_info "  • Run 'npm update -g' to update all packages"
log_info "  • Configure installed tools as needed"
