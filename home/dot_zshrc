# vim filetype:zsh

# -----------------------------------------------------------------------------
# Filename: ~/.zshrc
# Description: Interactive Zsh configuration for macOS and Linux.
#              Loads modular CLI environment, initializes completions, plugins,
#              shell behavior, and interactive tools (e.g., starship, direnv).
# -----------------------------------------------------------------------------

# Require HOME; exit with error if unset/empty
: "${HOME:?HOME must be set}"

# Silence "Last login" for interactive shells
touch "${HOME}/.hushlogin"

# -------------------- Path Configuration -------------------- #
# Deduplicate Zsh arrays early (path-like arrays only)
typeset -U path cdpath fpath manpath

# ------------------------------------------------------------ #
#                Load Modular Shell Environment                #
# ------------------------------------------------------------ #
# Essential XDG and Shell Paths; Assign only if unset/empty
: "${XDG_CONFIG_HOME:=${HOME}/.config}"
: "${SHELL_DIR:=${XDG_CONFIG_HOME}/shell}"
: "${SCRIPT_LOADER:=${SHELL_DIR}/lib/load_core.sh}"

# If SCRIPT_LOADER is a readable file (-r), source it and load core loader
# (defines log/source helpers, loads path helpers)
# shellcheck source=/dev/null
[[ -r "$SCRIPT_LOADER" ]] && source "$SCRIPT_LOADER"

# ------------------- Environment Variables ------------------ #
# XDG paths, language setup, etc.
source_sh_files "${SHELL_DIR}/profile"

# ---------------------- Shell Commands ---------------------- #
# Load all utility helpers (navigation, clipboard, editor, session, git, etc.)
source_sh_files "${SHELL_DIR}/utils"

# Essential aliases, functions, completions
source_sh_files "${SHELL_DIR}/functions"
source_sh_files "${SHELL_DIR}/aliases"

# ------------------------------------------------------------ #
#                     History Configuration                    #
# ------------------------------------------------------------ #
# Number of commands kept in memory and saved to the file
export HISTSIZE=10000
export SAVEHIST=10000
export HISTFILE="${XDG_CONFIG_HOME}/.zsh_history"
mkdir -p "$(dirname "${HISTFILE}")"

setopt HIST_FCNTL_LOCK               # Prevent simultaneous history writes
setopt HIST_IGNORE_DUPS              # Ignore consecutive duplicates
setopt HIST_IGNORE_SPACE             # Ignore commands starting with a space
setopt SHARE_HISTORY                 # Share history across Zsh instances

# ------------------------------------------------------------ #
#                    Tooling & Integrations                    #
# ------------------------------------------------------------ #
# Compute Homebrew prefix robustly (works even if HOMEBREW not exported yet)
# If the given command is available (command -v) then initialize it
BREW_PREFIX="${HOMEBREW:-$(command -v brew >/dev/null 2>&1 && brew --prefix 2>/dev/null)}"

# ------------------ ZSH Session Management ------------------ #
# Store Zsh session artifacts under XDG; ensure directory exists
export ZSH_SESSION="${XDG_CONFIG_HOME}/.zsh_sessions"
mkdir -p "$(dirname "${ZSH_SESSION}")"

# ---------------- ZSH Auto-Completion System ---------------- #
# Cache compdump under XDG for faster startup
export ZCOMPFILE="${XDG_CONFIG_HOME}/.zcompdump"
mkdir -p "$(dirname "${ZCOMPFILE}")"
autoload -U compinit
compinit -d "$ZCOMPFILE"

# -------------------- ZSH Autosuggestions ------------------- #
ZSH_AUTOSUGGESTIONS="share/zsh-autosuggestions/zsh-autosuggestions.zsh"

# If BREW_PREFIX is a non-empty (-n) string and the path is a regular file (-f),
# source the file from BREW_PREFIX
if [[ -n $BREW_PREFIX && -f "${BREW_PREFIX}/${ZSH_AUTOSUGGESTIONS}" ]]; then
  source "${BREW_PREFIX}/${ZSH_AUTOSUGGESTIONS}"
# If path is a regular file (-f) perform the action below
elif [[ -f "/usr/${ZSH_AUTOSUGGESTIONS}" ]]; then
  source "/usr/${ZSH_AUTOSUGGESTIONS}"
fi

# ------------------ ZSH Syntax Highlighting ----------------- #
ZSH_SYNTAX_HIGHLIGHTING="share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

if [[ -n $BREW_PREFIX && -f "${BREW_PREFIX}/${ZSH_SYNTAX_HIGHLIGHTING}" ]]; then
    source "${BREW_PREFIX}/${ZSH_SYNTAX_HIGHLIGHTING}"
elif [[ -f "/usr/${ZSH_SYNTAX_HIGHLIGHTING}" ]]; then
    source "/usr/${ZSH_SYNTAX_HIGHLIGHTING}"
fi

# -------------------------- Direnv -------------------------- #
# Docs: https://direnv.net
# If the `direnv` command is available (command -v), then initialize `direnv`
command -v direnv   >/dev/null 2>&1 && eval "$(direnv hook zsh)"

# ---------------- Carapace: Shell Completion ---------------- #
# Docs: https://carapace.sh
# If the `carapace` command is available (command -v), then initialize `carapace`
# shellcheck disable=SC1090
command -v carapace >/dev/null 2>&1 && source <(carapace _carapace zsh)

# ------------- Atuin: Shell History Replacement ------------- #
# Docs: https://docs.atuin.sh
# If the `atuin` command is available (command -v), then initialize `atuin`
command -v atuin    >/dev/null 2>&1 && eval "$(atuin init zsh)"

# -------------------------- Zoxide -------------------------- #
# Docs: https://github.com/ajeetdsouza/zoxide
# If the `zoxide` command is available (command -v), then initialize `zoxide`
command -v zoxide   >/dev/null 2>&1 && eval "$(zoxide init zsh)"

# ------------------ FZF: Fuzzy File Finder ------------------ #
# Docs: https://junegunn.github.io/fzf/
# If BREW_OPT_DIR is empty or unset, fall back to /opt/homebrew by default
FZF_DIR="${BREW_OPT_DIR:-${BREW_PREFIX:+${BREW_PREFIX}/opt}}/fzf/shell"

# If path is a regular file (-f), source the fzf key bindings
# shellcheck source=/dev/null
[[ -f "${FZF_DIR}/key-bindings.zsh" ]] && source "${FZF_DIR}/key-bindings.zsh"
# If path is a regular file (-f), source the fzf completions
# shellcheck source=/dev/null
[[ -f "${FZF_DIR}/completion.zsh"   ]] && source "${FZF_DIR}/completion.zsh"

export FZF_DEFAULT_OPTS='
    --height=40%
    --layout=reverse
    --info=inline
    --border
    --preview "bat --style=numbers --color=always {} || cat {}"
    --preview-window=right:60%
'

# ---------------------- FD: File Finder --------------------- #
# Docs: https://github.com/sharkdp/fd
# If the `fd` command is available (command -v), then initialize `fd`
# and improve fzf defaults
if command -v fd >/dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND='fd --type file --hidden --follow --color=always'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# ---------------------- Starship Prompt --------------------- #
# Docs: https://starship.rs/config/
# If the `starship` command is available (command -v), then initialize starship
if command -v starship >/dev/null 2>&1; then
    export STARSHIP_CONFIG="${XDG_CONFIG_HOME}/starship/starship.toml"
    eval "$(starship init zsh)"
fi

# ------------------------------------------------------------ #
#                       User Environment                       #
# ------------------------------------------------------------ #

# -------------- ZSH Auto-Suggestion Keybindings ------------- #
bindkey '^w' autosuggest-execute
bindkey '^e' autosuggest-accept
bindkey '^u' autosuggest-toggle
bindkey '^L' vi-forward-word
bindkey '^k' up-line-or-search
bindkey '^j' down-line-or-search
