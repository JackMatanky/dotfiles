#--------------------------------------------------------------------
# Filename: ~/.config/helix/languages.toml
#
# Helix Docs: https://docs.helix-editor.com/languages.html
#--------------------------------------------------------------------

# >>> Python <<<
[[language]]
name = "python"
file-types = ["py"]
shebangs = ["python"]
roots = [".", "pyproject.toml", "pyrightconfig.json"]
comment-token = "#"
language-servers = [
    "basedpyright",
    "ruff",
    "pylyzer",
    "scls",
]
auto-format = true
formatter = { command = "ruff", args = ["format", "-"] }
indent = { tab-width = 4, unit = "    " }

# --- BasedPyright Configuration ---
[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]

[language-server.basedpyright.config]
typeCheckingMode = "strict"         # Strict type checking (off | basic | strict)
reportMissingImports = true         # Report unresolved imports
reportUnusedVariable = false        # Disable unused variable checks (handled by Ruff or Pylyzer)
exclude = ["tests/**/*.py"]         # Exclude specific files or directories

# --- Pylyzer Configuration ---
[language-server.pylyzer]
command = "pylyzer"
args = ["--server"]

[language-server.pylyzer.config]
typeChecking = false
reportUnusedVariables = true         # Enable unused variable checks
reportUnusedImports = false          # Disable (handled by Ruff)
venvPath = ".venv"                  # Path to virtual environments
venv = "myenv"                       # Default virtual environment name

# --- Ruff Configuration ---
[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.ruff.config.settings]
line-length = 80
indent-width = 4
output-format = "concise"
show-fixes = true

[language-server.ruff.config.settings.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []
per-file-ignores = {"__init__.py" = ["F401"]}

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
preview = false

[language-server.ruff.config.settings.lint.isort]
force-single-line = false
combine-as-imports = true
order-by-type = true
known-first-party = ["myproject"]
default-section = "THIRDPARTY"
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]

[language-server.ruff.config.settings.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = true
ignore = ["W503"]                    # Ignore specific warnings
fixable = true                       # Enable fixable rules

# >>> HTML <<<
[[language]]
name = "html"
auto-format = true
language-servers = [
    "vscode-html-language-server",
    "emmet-lsp",
    "scls",
]
formatter = { command = "prettier", args = ["--parser", "html"]}
file-types = ["html", "gohtml"]
indent = { tab-width = 2,  unit = "  " }

# --- VS Code HTML Language Server ---
[language-server.vscode-html-language-server]
command = "vscode-html-language-server"

# --- EMMET-LSP / github.com/olrtg ---
[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

# >>> CSS <<<
[[language]]
name = "css"
auto-format = true
language-servers = [
    "vscode-css-language-server",
    "scls",
]
formatter = { command = "prettier", args = ["--parser", "css"]}
indent = { tab-width = 2, unit = "  " }

# --- VS Code CSS Language Server ---
[language-server.vscode-css-language-server]
command = "vscode-css-language-server"

# >>> JavaScript and TypeScript <<<
# JavaScript
[[language]]
name = "javascript"
auto-format = true
language-servers = ["typescript-language-server"]
formatter = { command = "prettier", args = ["--parser", "typescript"]}
indent = { tab-width = 2, unit = "  " }

# TypeScript
[[language]]
name = "typescript"
auto-format = false
language-servers = ["typescript-language-server"]
indent = { tab-width = 4, unit = "    " }

# --- TypeScript Language Server ---
[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]

# >>> JSON <<<
[[language]]
name = "json"
auto-format = true
language-servers = ["vscode-json-language-server"]
formatter = { command = "prettier", args = ["--parser", "json"]}
indent = { tab-width = 2, unit = "  " }

# --- VS Code JSON Language Server ---
[language-server.vscode-json-language-server]
command = "vscode-json-language-server"

# >>> TOML <<<
[[language]]
name = "toml"
auto-format = true
# https://github.com/bd82/toml-tools/tree/master/packages/prettier-plugin-toml
formatter = { command = "prettier", args = ["--parser", "toml"] }

# >>> Markdown <<<
[[language]]
name = "markdown"
language-servers = [
    "marksman",
    "scls",
]
auto-format = true
formatter = { command = "markdownlint", args = ["--fix"] }

[[language]]
name = "markdown"
language-servers = ["marksman"]
auto-format = false
formatter = { command = "prettier", args = ["--parser", "markdown"] }

# --- Marksman ---
[language-server.marksman]
command = "marksman"

# >>> Simple Completion Language Server <<<
# introduce a new language to enable completion on any doc by forcing set language with :set-language stub
[[language]]
name = "stub"
scope = "text.stub"
file-types = []
shebangs = []
roots = []
auto-format = false
language-servers = [ "scls" ]

[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)


# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"
