# vim: filetype=bash
# shellcheck shell=bash

# -----------------------------------------------------------------------------
# Filename: ~/.bashrc
# Description: Bash interactive shell configuration for macOS and Linux.
#              Loads modular CLI environment, defines completions, history,
#              and initializes interactive tooling (e.g., direnv, starship).
# -----------------------------------------------------------------------------

# Require HOME; exit with error if unset/empty
: "${HOME:?HOME must be set}"

# Silence "Last login" for interactive shells
touch "${HOME}/.hushlogin"

# ------------------------------------------------------------ #
#                Load Modular Shell Environment                #
# ------------------------------------------------------------ #
# # Essential XDG and Shell Paths; Assign only if unset/empty
# : "${XDG_CONFIG_HOME:=${HOME}/.config}"
# : "${SHELL_DIR:=${XDG_CONFIG_HOME}/shell}"
# : "${SCRIPT_LOADER:=${SHELL_DIR}/lib/load_core.sh}"

# # If SCRIPT_LOADER is a readable file (-r), source it and load core loader
# # (defines log/source helpers, loads path helpers)
# # shellcheck source=/dev/null
# [[ -r "$SCRIPT_LOADER" ]] && source "$SCRIPT_LOADER"

# # ------------------- Environment Variables ------------------ #
# # XDG paths, language setup, etc.
# source_sh_files "${SHELL_DIR}/profile"

# # ---------------------- Shell Commands ---------------------- #
# # Load all utility helpers (navigation, clipboard, editor, session, git, etc.)
# source_sh_files "${SHELL_DIR}/utils"

# # Essential aliases, functions, completions
# source_sh_files "${SHELL_DIR}/functions"
# source_sh_files "${SHELL_DIR}/aliases"
# ------------------------------------------------------------ #
#                    Load Shell Environment                    #
# ------------------------------------------------------------ #
# Source the master shell initialization file
# This loads all profile, utils, functions, and aliases
SHELL_INIT="${XDG_CONFIG_HOME:-$HOME/.config}/shell/init.sh"
# shellcheck source=/dev/null
[[ -r "$SHELL_INIT" ]] && source "$SHELL_INIT"

# ------------------------------------------------------------ #
#                     History Configuration                    #
# ------------------------------------------------------------ #
# Keep history under XDG; ensure directory exists
export HISTSIZE=10000
export HISTFILE="${XDG_CONFIG_HOME}/.bash_history"
mkdir -p "$(dirname "${HISTFILE}")"

# ------------------------------------------------------------ #
#                    Tooling & Integrations                    #
# ------------------------------------------------------------ #
# Compute Homebrew prefix robustly (works even if HOMEBREW not exported yet)
# If the given command is available (command -v) then initialize it
BREW_PREFIX="${HOMEBREW:-$(command -v brew >/dev/null 2>&1 && brew --prefix 2>/dev/null)}"

# ---------------------- Bash Completion --------------------- #
# Source system-wide bash completion (v1) if it exists
# BASH_COMPLETIONS="/etc/bash_completion"

# Source Homebrew bash completion (v2) if installed
# Homebrew recommends sourcing bash-completion from .bash_profile,
# but it can be loaded here since .bash_profile sources .bashrc.
BASH_COMPLETIONS="${BREW_PREFIX:+${BREW_PREFIX}/etc/profile.d/bash_completion.sh}"

# If the bash completions file is readable (-r), source it
# shellcheck source=/dev/null
[[ -r "$BASH_COMPLETIONS" ]] && source "$BASH_COMPLETIONS"

# -------------------------- Direnv -------------------------- #
# Docs: https://direnv.net
# If the `direnv` command is available (command -v), then initialize `direnv`
command -v direnv   >/dev/null 2>&1 && eval "$(direnv hook bash)"

# ---------------- Carapace: Shell Completion ---------------- #
# Docs: https://carapace.sh
# If the `carapace` command is available (command -v), then initialize `carapace`
# shellcheck disable=SC1090
command -v carapace >/dev/null 2>&1 && source <(carapace _carapace bash)

# ------------- Atuin: Shell History Replacement ------------- #
# Docs: https://docs.atuin.sh
# If the `atuin` command is available (command -v), then initialize `atuin`
command -v atuin    >/dev/null 2>&1 && eval "$(atuin init bash)"

# -------------------------- Zoxide -------------------------- #
# Docs: https://github.com/ajeetdsouza/zoxide
# If the `zoxide` command is available (command -v), then initialize `zoxide`
command -v zoxide   >/dev/null 2>&1 && eval "$(zoxide init bash)"

# ------------------ FZF: Fuzzy File Finder ------------------ #
# Docs: https://junegunn.github.io/fzf/
# If BREW_OPT_DIR is empty or unset, fall back to /opt/homebrew by default
FZF_DIR="${BREW_OPT_DIR:-${BREW_PREFIX:+${BREW_PREFIX}/opt}}/fzf/shell"

# If path is a regular file (-f), source the fzf key bindings
# shellcheck source=/dev/null
[[ -f "${FZF_DIR}/key-bindings.bash" ]] && source "${FZF_DIR}/key-bindings.bash"

# If path is a regular file (-f), source the fzf completions
# shellcheck source=/dev/null
[[ -f "${FZF_DIR}/completion.bash"   ]] && source "${FZF_DIR}/completion.bash"

export FZF_DEFAULT_OPTS='
    --height=40%
    --layout=reverse
    --info=inline
    --border
    --preview "bat --style=numbers --color=always {} || cat {}"
    --preview-window=right:60%
'

# ---------------------- FD: File Finder --------------------- #
# Docs: https://github.com/sharkdp/fd
# If the `fd` command is available (command -v), then initialize `fd`
# and improve fzf defaults
if command -v fd >/dev/null 2>&1; then
  export FZF_DEFAULT_COMMAND='fd --type file --hidden --follow --color=always'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# ---------------------- Starship Prompt --------------------- #
# Docs: https://starship.rs/config/
# If the `starship` command is available (command -v), then initialize starship
if command -v starship >/dev/null 2>&1; then
  export STARSHIP_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/starship/starship.toml"
  eval "$(starship init bash)"
fi
